// Package secretshub provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package secretshub

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetApiConfiguration request
	GetApiConfiguration(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchApiConfigurationWithBody request with any body
	PatchApiConfigurationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchApiConfiguration(ctx context.Context, body PatchApiConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SecretStoreInfoApiInfoGet request
	SecretStoreInfoApiInfoGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPoliciesApiPoliciesGet request
	ListPoliciesApiPoliciesGet(ctx context.Context, params *ListPoliciesApiPoliciesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PolicyCreateApiPoliciesPostWithBody request with any body
	PolicyCreateApiPoliciesPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PolicyCreateApiPoliciesPost(ctx context.Context, body PolicyCreateApiPoliciesPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PolicyDeleteApiPoliciesPolicyIdDelete request
	PolicyDeleteApiPoliciesPolicyIdDelete(ctx context.Context, policyId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PolicyGetApiPoliciesPolicyIdGet request
	PolicyGetApiPoliciesPolicyIdGet(ctx context.Context, policyId string, params *PolicyGetApiPoliciesPolicyIdGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetPolicyStateApiPoliciesPolicyIdStatePutWithBody request with any body
	SetPolicyStateApiPoliciesPolicyIdStatePutWithBody(ctx context.Context, policyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetPolicyStateApiPoliciesPolicyIdStatePut(ctx context.Context, policyId string, body SetPolicyStateApiPoliciesPolicyIdStatePutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TriggerScanApiScanDefinitionsTypeIdScanPostWithBody request with any body
	TriggerScanApiScanDefinitionsTypeIdScanPostWithBody(ctx context.Context, pType string, id string, params *TriggerScanApiScanDefinitionsTypeIdScanPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TriggerScanApiScanDefinitionsTypeIdScanPost(ctx context.Context, pType string, id string, params *TriggerScanApiScanDefinitionsTypeIdScanPostParams, body TriggerScanApiScanDefinitionsTypeIdScanPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetScansApiScansGet request
	GetScansApiScansGet(ctx context.Context, params *GetScansApiScansGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAllSecretStoresApiSecretStoresGet request
	ListAllSecretStoresApiSecretStoresGet(ctx context.Context, params *ListAllSecretStoresApiSecretStoresGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSecretStoreApiSecretStoresPostWithBody request with any body
	CreateSecretStoreApiSecretStoresPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSecretStoreApiSecretStoresPost(ctx context.Context, body CreateSecretStoreApiSecretStoresPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiSecretStoresStateWithBody request with any body
	PutApiSecretStoresStateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiSecretStoresState(ctx context.Context, body PutApiSecretStoresStateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSecretStoreApiSecretStoresStoreIdDelete request
	DeleteSecretStoreApiSecretStoresStoreIdDelete(ctx context.Context, storeId SecretStoreIdString, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetASecretStoreApiSecretStoresStoreIdGet request
	GetASecretStoreApiSecretStoresStoreIdGet(ctx context.Context, storeId SecretStoreIdString, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSecretStoreApiSecretStoresStoreIdPatchWithBody request with any body
	UpdateSecretStoreApiSecretStoresStoreIdPatchWithBody(ctx context.Context, storeId SecretStoreIdString, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateSecretStoreApiSecretStoresStoreIdPatch(ctx context.Context, storeId SecretStoreIdString, body UpdateSecretStoreApiSecretStoresStoreIdPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAllSecretsFiltersApiSecretStoresStoreIdFiltersGet request
	ListAllSecretsFiltersApiSecretStoresStoreIdFiltersGet(ctx context.Context, storeId SecretStoreIdString, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSecretsFilterApiSecretStoresStoreIdFiltersPostWithBody request with any body
	CreateSecretsFilterApiSecretStoresStoreIdFiltersPostWithBody(ctx context.Context, storeId SecretStoreIdString, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSecretsFilterApiSecretStoresStoreIdFiltersPost(ctx context.Context, storeId SecretStoreIdString, body CreateSecretsFilterApiSecretStoresStoreIdFiltersPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSecretsFilterApiSecretStoresStoreIdFiltersFilterIdDelete request
	DeleteSecretsFilterApiSecretStoresStoreIdFiltersFilterIdDelete(ctx context.Context, storeId SecretStoreIdString, filterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetASecretsFilterApiSecretStoresStoreIdFiltersFilterIdGet request
	GetASecretsFilterApiSecretStoresStoreIdFiltersFilterIdGet(ctx context.Context, storeId SecretStoreIdString, filterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiSecretStoresStoreIdStateWithBody request with any body
	PutApiSecretStoresStoreIdStateWithBody(ctx context.Context, storeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiSecretStoresStoreIdState(ctx context.Context, storeId string, body PutApiSecretStoresStoreIdStateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTheConnectionStatusOfASecretStoreApiSecretStoresStoreIdStatusConnectionGet request
	GetTheConnectionStatusOfASecretStoreApiSecretStoresStoreIdStatusConnectionGet(ctx context.Context, storeId SecretStoreIdString, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSecretsApiSecretsGet request
	ListSecretsApiSecretsGet(ctx context.Context, params *ListSecretsApiSecretsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetApiConfiguration(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiConfigurationRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApiConfigurationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApiConfigurationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApiConfiguration(ctx context.Context, body PatchApiConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApiConfigurationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SecretStoreInfoApiInfoGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSecretStoreInfoApiInfoGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPoliciesApiPoliciesGet(ctx context.Context, params *ListPoliciesApiPoliciesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPoliciesApiPoliciesGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PolicyCreateApiPoliciesPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPolicyCreateApiPoliciesPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PolicyCreateApiPoliciesPost(ctx context.Context, body PolicyCreateApiPoliciesPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPolicyCreateApiPoliciesPostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PolicyDeleteApiPoliciesPolicyIdDelete(ctx context.Context, policyId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPolicyDeleteApiPoliciesPolicyIdDeleteRequest(c.Server, policyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PolicyGetApiPoliciesPolicyIdGet(ctx context.Context, policyId string, params *PolicyGetApiPoliciesPolicyIdGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPolicyGetApiPoliciesPolicyIdGetRequest(c.Server, policyId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetPolicyStateApiPoliciesPolicyIdStatePutWithBody(ctx context.Context, policyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetPolicyStateApiPoliciesPolicyIdStatePutRequestWithBody(c.Server, policyId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetPolicyStateApiPoliciesPolicyIdStatePut(ctx context.Context, policyId string, body SetPolicyStateApiPoliciesPolicyIdStatePutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetPolicyStateApiPoliciesPolicyIdStatePutRequest(c.Server, policyId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TriggerScanApiScanDefinitionsTypeIdScanPostWithBody(ctx context.Context, pType string, id string, params *TriggerScanApiScanDefinitionsTypeIdScanPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTriggerScanApiScanDefinitionsTypeIdScanPostRequestWithBody(c.Server, pType, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TriggerScanApiScanDefinitionsTypeIdScanPost(ctx context.Context, pType string, id string, params *TriggerScanApiScanDefinitionsTypeIdScanPostParams, body TriggerScanApiScanDefinitionsTypeIdScanPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTriggerScanApiScanDefinitionsTypeIdScanPostRequest(c.Server, pType, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetScansApiScansGet(ctx context.Context, params *GetScansApiScansGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetScansApiScansGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAllSecretStoresApiSecretStoresGet(ctx context.Context, params *ListAllSecretStoresApiSecretStoresGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAllSecretStoresApiSecretStoresGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSecretStoreApiSecretStoresPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSecretStoreApiSecretStoresPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSecretStoreApiSecretStoresPost(ctx context.Context, body CreateSecretStoreApiSecretStoresPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSecretStoreApiSecretStoresPostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiSecretStoresStateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiSecretStoresStateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiSecretStoresState(ctx context.Context, body PutApiSecretStoresStateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiSecretStoresStateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSecretStoreApiSecretStoresStoreIdDelete(ctx context.Context, storeId SecretStoreIdString, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSecretStoreApiSecretStoresStoreIdDeleteRequest(c.Server, storeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetASecretStoreApiSecretStoresStoreIdGet(ctx context.Context, storeId SecretStoreIdString, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetASecretStoreApiSecretStoresStoreIdGetRequest(c.Server, storeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSecretStoreApiSecretStoresStoreIdPatchWithBody(ctx context.Context, storeId SecretStoreIdString, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSecretStoreApiSecretStoresStoreIdPatchRequestWithBody(c.Server, storeId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSecretStoreApiSecretStoresStoreIdPatch(ctx context.Context, storeId SecretStoreIdString, body UpdateSecretStoreApiSecretStoresStoreIdPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSecretStoreApiSecretStoresStoreIdPatchRequest(c.Server, storeId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAllSecretsFiltersApiSecretStoresStoreIdFiltersGet(ctx context.Context, storeId SecretStoreIdString, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAllSecretsFiltersApiSecretStoresStoreIdFiltersGetRequest(c.Server, storeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSecretsFilterApiSecretStoresStoreIdFiltersPostWithBody(ctx context.Context, storeId SecretStoreIdString, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSecretsFilterApiSecretStoresStoreIdFiltersPostRequestWithBody(c.Server, storeId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSecretsFilterApiSecretStoresStoreIdFiltersPost(ctx context.Context, storeId SecretStoreIdString, body CreateSecretsFilterApiSecretStoresStoreIdFiltersPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSecretsFilterApiSecretStoresStoreIdFiltersPostRequest(c.Server, storeId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSecretsFilterApiSecretStoresStoreIdFiltersFilterIdDelete(ctx context.Context, storeId SecretStoreIdString, filterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSecretsFilterApiSecretStoresStoreIdFiltersFilterIdDeleteRequest(c.Server, storeId, filterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetASecretsFilterApiSecretStoresStoreIdFiltersFilterIdGet(ctx context.Context, storeId SecretStoreIdString, filterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetASecretsFilterApiSecretStoresStoreIdFiltersFilterIdGetRequest(c.Server, storeId, filterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiSecretStoresStoreIdStateWithBody(ctx context.Context, storeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiSecretStoresStoreIdStateRequestWithBody(c.Server, storeId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiSecretStoresStoreIdState(ctx context.Context, storeId string, body PutApiSecretStoresStoreIdStateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiSecretStoresStoreIdStateRequest(c.Server, storeId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTheConnectionStatusOfASecretStoreApiSecretStoresStoreIdStatusConnectionGet(ctx context.Context, storeId SecretStoreIdString, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTheConnectionStatusOfASecretStoreApiSecretStoresStoreIdStatusConnectionGetRequest(c.Server, storeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSecretsApiSecretsGet(ctx context.Context, params *ListSecretsApiSecretsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSecretsApiSecretsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetApiConfigurationRequest generates requests for GetApiConfiguration
func NewGetApiConfigurationRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/configuration")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchApiConfigurationRequest calls the generic PatchApiConfiguration builder with application/json body
func NewPatchApiConfigurationRequest(server string, body PatchApiConfigurationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchApiConfigurationRequestWithBody(server, "application/json", bodyReader)
}

// NewPatchApiConfigurationRequestWithBody generates requests for PatchApiConfiguration with any type of body
func NewPatchApiConfigurationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/configuration")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSecretStoreInfoApiInfoGetRequest generates requests for SecretStoreInfoApiInfoGet
func NewSecretStoreInfoApiInfoGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListPoliciesApiPoliciesGetRequest generates requests for ListPoliciesApiPoliciesGet
func NewListPoliciesApiPoliciesGetRequest(server string, params *ListPoliciesApiPoliciesGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/policies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Projection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projection", runtime.ParamLocationQuery, *params.Projection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPolicyCreateApiPoliciesPostRequest calls the generic PolicyCreateApiPoliciesPost builder with application/json body
func NewPolicyCreateApiPoliciesPostRequest(server string, body PolicyCreateApiPoliciesPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPolicyCreateApiPoliciesPostRequestWithBody(server, "application/json", bodyReader)
}

// NewPolicyCreateApiPoliciesPostRequestWithBody generates requests for PolicyCreateApiPoliciesPost with any type of body
func NewPolicyCreateApiPoliciesPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/policies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPolicyDeleteApiPoliciesPolicyIdDeleteRequest generates requests for PolicyDeleteApiPoliciesPolicyIdDelete
func NewPolicyDeleteApiPoliciesPolicyIdDeleteRequest(server string, policyId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policyId", runtime.ParamLocationPath, policyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/policies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPolicyGetApiPoliciesPolicyIdGetRequest generates requests for PolicyGetApiPoliciesPolicyIdGet
func NewPolicyGetApiPoliciesPolicyIdGetRequest(server string, policyId string, params *PolicyGetApiPoliciesPolicyIdGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policyId", runtime.ParamLocationPath, policyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/policies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projection", runtime.ParamLocationQuery, params.Projection); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSetPolicyStateApiPoliciesPolicyIdStatePutRequest calls the generic SetPolicyStateApiPoliciesPolicyIdStatePut builder with application/json body
func NewSetPolicyStateApiPoliciesPolicyIdStatePutRequest(server string, policyId string, body SetPolicyStateApiPoliciesPolicyIdStatePutJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetPolicyStateApiPoliciesPolicyIdStatePutRequestWithBody(server, policyId, "application/json", bodyReader)
}

// NewSetPolicyStateApiPoliciesPolicyIdStatePutRequestWithBody generates requests for SetPolicyStateApiPoliciesPolicyIdStatePut with any type of body
func NewSetPolicyStateApiPoliciesPolicyIdStatePutRequestWithBody(server string, policyId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policyId", runtime.ParamLocationPath, policyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/policies/%s/state", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTriggerScanApiScanDefinitionsTypeIdScanPostRequest calls the generic TriggerScanApiScanDefinitionsTypeIdScanPost builder with application/json body
func NewTriggerScanApiScanDefinitionsTypeIdScanPostRequest(server string, pType string, id string, params *TriggerScanApiScanDefinitionsTypeIdScanPostParams, body TriggerScanApiScanDefinitionsTypeIdScanPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTriggerScanApiScanDefinitionsTypeIdScanPostRequestWithBody(server, pType, id, params, "application/json", bodyReader)
}

// NewTriggerScanApiScanDefinitionsTypeIdScanPostRequestWithBody generates requests for TriggerScanApiScanDefinitionsTypeIdScanPost with any type of body
func NewTriggerScanApiScanDefinitionsTypeIdScanPostRequestWithBody(server string, pType string, id string, params *TriggerScanApiScanDefinitionsTypeIdScanPostParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/scan-definitions/%s/%s/scan", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept", runtime.ParamLocationHeader, params.Accept)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Accept", headerParam0)

	}

	return req, nil
}

// NewGetScansApiScansGetRequest generates requests for GetScansApiScansGet
func NewGetScansApiScansGetRequest(server string, params *GetScansApiScansGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/scans")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept", runtime.ParamLocationHeader, params.Accept)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Accept", headerParam0)

	}

	return req, nil
}

// NewListAllSecretStoresApiSecretStoresGetRequest generates requests for ListAllSecretStoresApiSecretStoresGet
func NewListAllSecretStoresApiSecretStoresGetRequest(server string, params *ListAllSecretStoresApiSecretStoresGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/secret-stores")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "behavior", runtime.ParamLocationQuery, params.Behavior); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSecretStoreApiSecretStoresPostRequest calls the generic CreateSecretStoreApiSecretStoresPost builder with application/json body
func NewCreateSecretStoreApiSecretStoresPostRequest(server string, body CreateSecretStoreApiSecretStoresPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSecretStoreApiSecretStoresPostRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateSecretStoreApiSecretStoresPostRequestWithBody generates requests for CreateSecretStoreApiSecretStoresPost with any type of body
func NewCreateSecretStoreApiSecretStoresPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/secret-stores")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutApiSecretStoresStateRequest calls the generic PutApiSecretStoresState builder with application/json body
func NewPutApiSecretStoresStateRequest(server string, body PutApiSecretStoresStateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiSecretStoresStateRequestWithBody(server, "application/json", bodyReader)
}

// NewPutApiSecretStoresStateRequestWithBody generates requests for PutApiSecretStoresState with any type of body
func NewPutApiSecretStoresStateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/secret-stores/states")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSecretStoreApiSecretStoresStoreIdDeleteRequest generates requests for DeleteSecretStoreApiSecretStoresStoreIdDelete
func NewDeleteSecretStoreApiSecretStoresStoreIdDeleteRequest(server string, storeId SecretStoreIdString) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "storeId", runtime.ParamLocationPath, storeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/secret-stores/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetASecretStoreApiSecretStoresStoreIdGetRequest generates requests for GetASecretStoreApiSecretStoresStoreIdGet
func NewGetASecretStoreApiSecretStoresStoreIdGetRequest(server string, storeId SecretStoreIdString) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "storeId", runtime.ParamLocationPath, storeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/secret-stores/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateSecretStoreApiSecretStoresStoreIdPatchRequest calls the generic UpdateSecretStoreApiSecretStoresStoreIdPatch builder with application/json body
func NewUpdateSecretStoreApiSecretStoresStoreIdPatchRequest(server string, storeId SecretStoreIdString, body UpdateSecretStoreApiSecretStoresStoreIdPatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSecretStoreApiSecretStoresStoreIdPatchRequestWithBody(server, storeId, "application/json", bodyReader)
}

// NewUpdateSecretStoreApiSecretStoresStoreIdPatchRequestWithBody generates requests for UpdateSecretStoreApiSecretStoresStoreIdPatch with any type of body
func NewUpdateSecretStoreApiSecretStoresStoreIdPatchRequestWithBody(server string, storeId SecretStoreIdString, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "storeId", runtime.ParamLocationPath, storeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/secret-stores/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListAllSecretsFiltersApiSecretStoresStoreIdFiltersGetRequest generates requests for ListAllSecretsFiltersApiSecretStoresStoreIdFiltersGet
func NewListAllSecretsFiltersApiSecretStoresStoreIdFiltersGetRequest(server string, storeId SecretStoreIdString) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "storeId", runtime.ParamLocationPath, storeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/secret-stores/%s/filters", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSecretsFilterApiSecretStoresStoreIdFiltersPostRequest calls the generic CreateSecretsFilterApiSecretStoresStoreIdFiltersPost builder with application/json body
func NewCreateSecretsFilterApiSecretStoresStoreIdFiltersPostRequest(server string, storeId SecretStoreIdString, body CreateSecretsFilterApiSecretStoresStoreIdFiltersPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSecretsFilterApiSecretStoresStoreIdFiltersPostRequestWithBody(server, storeId, "application/json", bodyReader)
}

// NewCreateSecretsFilterApiSecretStoresStoreIdFiltersPostRequestWithBody generates requests for CreateSecretsFilterApiSecretStoresStoreIdFiltersPost with any type of body
func NewCreateSecretsFilterApiSecretStoresStoreIdFiltersPostRequestWithBody(server string, storeId SecretStoreIdString, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "storeId", runtime.ParamLocationPath, storeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/secret-stores/%s/filters", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSecretsFilterApiSecretStoresStoreIdFiltersFilterIdDeleteRequest generates requests for DeleteSecretsFilterApiSecretStoresStoreIdFiltersFilterIdDelete
func NewDeleteSecretsFilterApiSecretStoresStoreIdFiltersFilterIdDeleteRequest(server string, storeId SecretStoreIdString, filterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "storeId", runtime.ParamLocationPath, storeId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "filterId", runtime.ParamLocationPath, filterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/secret-stores/%s/filters/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetASecretsFilterApiSecretStoresStoreIdFiltersFilterIdGetRequest generates requests for GetASecretsFilterApiSecretStoresStoreIdFiltersFilterIdGet
func NewGetASecretsFilterApiSecretStoresStoreIdFiltersFilterIdGetRequest(server string, storeId SecretStoreIdString, filterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "storeId", runtime.ParamLocationPath, storeId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "filterId", runtime.ParamLocationPath, filterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/secret-stores/%s/filters/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiSecretStoresStoreIdStateRequest calls the generic PutApiSecretStoresStoreIdState builder with application/json body
func NewPutApiSecretStoresStoreIdStateRequest(server string, storeId string, body PutApiSecretStoresStoreIdStateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiSecretStoresStoreIdStateRequestWithBody(server, storeId, "application/json", bodyReader)
}

// NewPutApiSecretStoresStoreIdStateRequestWithBody generates requests for PutApiSecretStoresStoreIdState with any type of body
func NewPutApiSecretStoresStoreIdStateRequestWithBody(server string, storeId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "storeId", runtime.ParamLocationPath, storeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/secret-stores/%s/state", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTheConnectionStatusOfASecretStoreApiSecretStoresStoreIdStatusConnectionGetRequest generates requests for GetTheConnectionStatusOfASecretStoreApiSecretStoresStoreIdStatusConnectionGet
func NewGetTheConnectionStatusOfASecretStoreApiSecretStoresStoreIdStatusConnectionGetRequest(server string, storeId SecretStoreIdString) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "storeId", runtime.ParamLocationPath, storeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/secret-stores/%s/status/connection", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListSecretsApiSecretsGetRequest generates requests for ListSecretsApiSecretsGet
func NewListSecretsApiSecretsGetRequest(server string, params *ListSecretsApiSecretsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/secrets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Projection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projection", runtime.ParamLocationQuery, *params.Projection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetApiConfigurationWithResponse request
	GetApiConfigurationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiConfigurationResponse, error)

	// PatchApiConfigurationWithBodyWithResponse request with any body
	PatchApiConfigurationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApiConfigurationResponse, error)

	PatchApiConfigurationWithResponse(ctx context.Context, body PatchApiConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApiConfigurationResponse, error)

	// SecretStoreInfoApiInfoGetWithResponse request
	SecretStoreInfoApiInfoGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SecretStoreInfoApiInfoGetResponse, error)

	// ListPoliciesApiPoliciesGetWithResponse request
	ListPoliciesApiPoliciesGetWithResponse(ctx context.Context, params *ListPoliciesApiPoliciesGetParams, reqEditors ...RequestEditorFn) (*ListPoliciesApiPoliciesGetResponse, error)

	// PolicyCreateApiPoliciesPostWithBodyWithResponse request with any body
	PolicyCreateApiPoliciesPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PolicyCreateApiPoliciesPostResponse, error)

	PolicyCreateApiPoliciesPostWithResponse(ctx context.Context, body PolicyCreateApiPoliciesPostJSONRequestBody, reqEditors ...RequestEditorFn) (*PolicyCreateApiPoliciesPostResponse, error)

	// PolicyDeleteApiPoliciesPolicyIdDeleteWithResponse request
	PolicyDeleteApiPoliciesPolicyIdDeleteWithResponse(ctx context.Context, policyId string, reqEditors ...RequestEditorFn) (*PolicyDeleteApiPoliciesPolicyIdDeleteResponse, error)

	// PolicyGetApiPoliciesPolicyIdGetWithResponse request
	PolicyGetApiPoliciesPolicyIdGetWithResponse(ctx context.Context, policyId string, params *PolicyGetApiPoliciesPolicyIdGetParams, reqEditors ...RequestEditorFn) (*PolicyGetApiPoliciesPolicyIdGetResponse, error)

	// SetPolicyStateApiPoliciesPolicyIdStatePutWithBodyWithResponse request with any body
	SetPolicyStateApiPoliciesPolicyIdStatePutWithBodyWithResponse(ctx context.Context, policyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetPolicyStateApiPoliciesPolicyIdStatePutResponse, error)

	SetPolicyStateApiPoliciesPolicyIdStatePutWithResponse(ctx context.Context, policyId string, body SetPolicyStateApiPoliciesPolicyIdStatePutJSONRequestBody, reqEditors ...RequestEditorFn) (*SetPolicyStateApiPoliciesPolicyIdStatePutResponse, error)

	// TriggerScanApiScanDefinitionsTypeIdScanPostWithBodyWithResponse request with any body
	TriggerScanApiScanDefinitionsTypeIdScanPostWithBodyWithResponse(ctx context.Context, pType string, id string, params *TriggerScanApiScanDefinitionsTypeIdScanPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TriggerScanApiScanDefinitionsTypeIdScanPostResponse, error)

	TriggerScanApiScanDefinitionsTypeIdScanPostWithResponse(ctx context.Context, pType string, id string, params *TriggerScanApiScanDefinitionsTypeIdScanPostParams, body TriggerScanApiScanDefinitionsTypeIdScanPostJSONRequestBody, reqEditors ...RequestEditorFn) (*TriggerScanApiScanDefinitionsTypeIdScanPostResponse, error)

	// GetScansApiScansGetWithResponse request
	GetScansApiScansGetWithResponse(ctx context.Context, params *GetScansApiScansGetParams, reqEditors ...RequestEditorFn) (*GetScansApiScansGetResponse, error)

	// ListAllSecretStoresApiSecretStoresGetWithResponse request
	ListAllSecretStoresApiSecretStoresGetWithResponse(ctx context.Context, params *ListAllSecretStoresApiSecretStoresGetParams, reqEditors ...RequestEditorFn) (*ListAllSecretStoresApiSecretStoresGetResponse, error)

	// CreateSecretStoreApiSecretStoresPostWithBodyWithResponse request with any body
	CreateSecretStoreApiSecretStoresPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSecretStoreApiSecretStoresPostResponse, error)

	CreateSecretStoreApiSecretStoresPostWithResponse(ctx context.Context, body CreateSecretStoreApiSecretStoresPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSecretStoreApiSecretStoresPostResponse, error)

	// PutApiSecretStoresStateWithBodyWithResponse request with any body
	PutApiSecretStoresStateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiSecretStoresStateResponse, error)

	PutApiSecretStoresStateWithResponse(ctx context.Context, body PutApiSecretStoresStateJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiSecretStoresStateResponse, error)

	// DeleteSecretStoreApiSecretStoresStoreIdDeleteWithResponse request
	DeleteSecretStoreApiSecretStoresStoreIdDeleteWithResponse(ctx context.Context, storeId SecretStoreIdString, reqEditors ...RequestEditorFn) (*DeleteSecretStoreApiSecretStoresStoreIdDeleteResponse, error)

	// GetASecretStoreApiSecretStoresStoreIdGetWithResponse request
	GetASecretStoreApiSecretStoresStoreIdGetWithResponse(ctx context.Context, storeId SecretStoreIdString, reqEditors ...RequestEditorFn) (*GetASecretStoreApiSecretStoresStoreIdGetResponse, error)

	// UpdateSecretStoreApiSecretStoresStoreIdPatchWithBodyWithResponse request with any body
	UpdateSecretStoreApiSecretStoresStoreIdPatchWithBodyWithResponse(ctx context.Context, storeId SecretStoreIdString, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSecretStoreApiSecretStoresStoreIdPatchResponse, error)

	UpdateSecretStoreApiSecretStoresStoreIdPatchWithResponse(ctx context.Context, storeId SecretStoreIdString, body UpdateSecretStoreApiSecretStoresStoreIdPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSecretStoreApiSecretStoresStoreIdPatchResponse, error)

	// ListAllSecretsFiltersApiSecretStoresStoreIdFiltersGetWithResponse request
	ListAllSecretsFiltersApiSecretStoresStoreIdFiltersGetWithResponse(ctx context.Context, storeId SecretStoreIdString, reqEditors ...RequestEditorFn) (*ListAllSecretsFiltersApiSecretStoresStoreIdFiltersGetResponse, error)

	// CreateSecretsFilterApiSecretStoresStoreIdFiltersPostWithBodyWithResponse request with any body
	CreateSecretsFilterApiSecretStoresStoreIdFiltersPostWithBodyWithResponse(ctx context.Context, storeId SecretStoreIdString, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSecretsFilterApiSecretStoresStoreIdFiltersPostResponse, error)

	CreateSecretsFilterApiSecretStoresStoreIdFiltersPostWithResponse(ctx context.Context, storeId SecretStoreIdString, body CreateSecretsFilterApiSecretStoresStoreIdFiltersPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSecretsFilterApiSecretStoresStoreIdFiltersPostResponse, error)

	// DeleteSecretsFilterApiSecretStoresStoreIdFiltersFilterIdDeleteWithResponse request
	DeleteSecretsFilterApiSecretStoresStoreIdFiltersFilterIdDeleteWithResponse(ctx context.Context, storeId SecretStoreIdString, filterId string, reqEditors ...RequestEditorFn) (*DeleteSecretsFilterApiSecretStoresStoreIdFiltersFilterIdDeleteResponse, error)

	// GetASecretsFilterApiSecretStoresStoreIdFiltersFilterIdGetWithResponse request
	GetASecretsFilterApiSecretStoresStoreIdFiltersFilterIdGetWithResponse(ctx context.Context, storeId SecretStoreIdString, filterId string, reqEditors ...RequestEditorFn) (*GetASecretsFilterApiSecretStoresStoreIdFiltersFilterIdGetResponse, error)

	// PutApiSecretStoresStoreIdStateWithBodyWithResponse request with any body
	PutApiSecretStoresStoreIdStateWithBodyWithResponse(ctx context.Context, storeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiSecretStoresStoreIdStateResponse, error)

	PutApiSecretStoresStoreIdStateWithResponse(ctx context.Context, storeId string, body PutApiSecretStoresStoreIdStateJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiSecretStoresStoreIdStateResponse, error)

	// GetTheConnectionStatusOfASecretStoreApiSecretStoresStoreIdStatusConnectionGetWithResponse request
	GetTheConnectionStatusOfASecretStoreApiSecretStoresStoreIdStatusConnectionGetWithResponse(ctx context.Context, storeId SecretStoreIdString, reqEditors ...RequestEditorFn) (*GetTheConnectionStatusOfASecretStoreApiSecretStoresStoreIdStatusConnectionGetResponse, error)

	// ListSecretsApiSecretsGetWithResponse request
	ListSecretsApiSecretsGetWithResponse(ctx context.Context, params *ListSecretsApiSecretsGetParams, reqEditors ...RequestEditorFn) (*ListSecretsApiSecretsGetResponse, error)
}

type GetApiConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TenantConfigurationOutput
	JSON401      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetApiConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchApiConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PatchApiConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchApiConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecretStoreInfoApiInfoGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TenantInfoOutput
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r SecretStoreInfoApiInfoGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecretStoreInfoApiInfoGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPoliciesApiPoliciesGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PolicyListOutput
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListPoliciesApiPoliciesGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPoliciesApiPoliciesGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PolicyCreateApiPoliciesPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PolicyRegularOutput
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PolicyCreateApiPoliciesPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PolicyCreateApiPoliciesPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PolicyDeleteApiPoliciesPolicyIdDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeletePolicyOutput
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PolicyDeleteApiPoliciesPolicyIdDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PolicyDeleteApiPoliciesPolicyIdDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PolicyGetApiPoliciesPolicyIdGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PolicyGetApiPoliciesPolicyIdGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PolicyGetApiPoliciesPolicyIdGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetPolicyStateApiPoliciesPolicyIdStatePutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r SetPolicyStateApiPoliciesPolicyIdStatePutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetPolicyStateApiPoliciesPolicyIdStatePutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TriggerScanApiScanDefinitionsTypeIdScanPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TriggerScanOutput
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON405      *ErrorResponse
	JSON406      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r TriggerScanApiScanDefinitionsTypeIdScanPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TriggerScanApiScanDefinitionsTypeIdScanPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetScansApiScansGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScanListOutput
	JSON403      *ErrorResponse
	JSON405      *ErrorResponse
	JSON406      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetScansApiScansGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetScansApiScansGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAllSecretStoresApiSecretStoresGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SecretStoresWithReplicatedDataOutputList
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListAllSecretStoresApiSecretStoresGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAllSecretStoresApiSecretStoresGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSecretStoreApiSecretStoresPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SecretStoreOutput
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON409      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateSecretStoreApiSecretStoresPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSecretStoreApiSecretStoresPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiSecretStoresStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON207      *struct {
		Results *[]struct {
			ErrorMessage *string                                  `json:"errorMessage,omitempty"`
			Result       *PutApiSecretStoresState207ResultsResult `json:"result,omitempty"`

			// SecretStoreId The unique identifier of the secret store
			SecretStoreId *SecretStoreIdString `json:"secretStoreId,omitempty"`
		} `json:"results,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON409 *ErrorResponse
}
type PutApiSecretStoresState207ResultsResult string

// Status returns HTTPResponse.Status
func (r PutApiSecretStoresStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiSecretStoresStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSecretStoreApiSecretStoresStoreIdDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteSecretStoreApiSecretStoresStoreIdDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSecretStoreApiSecretStoresStoreIdDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetASecretStoreApiSecretStoresStoreIdGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SecretStoreWithReplicatedDataOutput
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetASecretStoreApiSecretStoresStoreIdGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetASecretStoreApiSecretStoresStoreIdGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSecretStoreApiSecretStoresStoreIdPatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SecretStoreOutput
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateSecretStoreApiSecretStoresStoreIdPatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSecretStoreApiSecretStoresStoreIdPatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAllSecretsFiltersApiSecretStoresStoreIdFiltersGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FilterOutput
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListAllSecretsFiltersApiSecretStoresStoreIdFiltersGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAllSecretsFiltersApiSecretStoresStoreIdFiltersGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSecretsFilterApiSecretStoresStoreIdFiltersPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *FilterOutput
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateSecretsFilterApiSecretStoresStoreIdFiltersPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSecretsFilterApiSecretStoresStoreIdFiltersPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSecretsFilterApiSecretStoresStoreIdFiltersFilterIdDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteSecretsFilterApiSecretStoresStoreIdFiltersFilterIdDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSecretsFilterApiSecretStoresStoreIdFiltersFilterIdDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetASecretsFilterApiSecretStoresStoreIdFiltersFilterIdGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FilterOutput
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetASecretsFilterApiSecretStoresStoreIdFiltersFilterIdGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetASecretsFilterApiSecretStoresStoreIdFiltersFilterIdGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiSecretStoresStoreIdStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PutApiSecretStoresStoreIdStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiSecretStoresStoreIdStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTheConnectionStatusOfASecretStoreApiSecretStoresStoreIdStatusConnectionGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConnectionsTestOutput
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetTheConnectionStatusOfASecretStoreApiSecretStoresStoreIdStatusConnectionGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTheConnectionStatusOfASecretStoreApiSecretStoresStoreIdStatusConnectionGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSecretsApiSecretsGetResponse struct {
	Body                              []byte
	HTTPResponse                      *http.Response
	JSON200                           *SecretListOutput
	ApplicationxSecretshubBetaJSON200 *SecretListOutput
	JSON400                           *ErrorResponse
	JSON401                           *ErrorResponse
	JSON403                           *ErrorResponse
	JSON405                           *ErrorResponse
	JSON406                           *ErrorResponse
	JSON500                           *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListSecretsApiSecretsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSecretsApiSecretsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetApiConfigurationWithResponse request returning *GetApiConfigurationResponse
func (c *ClientWithResponses) GetApiConfigurationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiConfigurationResponse, error) {
	rsp, err := c.GetApiConfiguration(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiConfigurationResponse(rsp)
}

// PatchApiConfigurationWithBodyWithResponse request with arbitrary body returning *PatchApiConfigurationResponse
func (c *ClientWithResponses) PatchApiConfigurationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApiConfigurationResponse, error) {
	rsp, err := c.PatchApiConfigurationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApiConfigurationResponse(rsp)
}

func (c *ClientWithResponses) PatchApiConfigurationWithResponse(ctx context.Context, body PatchApiConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApiConfigurationResponse, error) {
	rsp, err := c.PatchApiConfiguration(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApiConfigurationResponse(rsp)
}

// SecretStoreInfoApiInfoGetWithResponse request returning *SecretStoreInfoApiInfoGetResponse
func (c *ClientWithResponses) SecretStoreInfoApiInfoGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SecretStoreInfoApiInfoGetResponse, error) {
	rsp, err := c.SecretStoreInfoApiInfoGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSecretStoreInfoApiInfoGetResponse(rsp)
}

// ListPoliciesApiPoliciesGetWithResponse request returning *ListPoliciesApiPoliciesGetResponse
func (c *ClientWithResponses) ListPoliciesApiPoliciesGetWithResponse(ctx context.Context, params *ListPoliciesApiPoliciesGetParams, reqEditors ...RequestEditorFn) (*ListPoliciesApiPoliciesGetResponse, error) {
	rsp, err := c.ListPoliciesApiPoliciesGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPoliciesApiPoliciesGetResponse(rsp)
}

// PolicyCreateApiPoliciesPostWithBodyWithResponse request with arbitrary body returning *PolicyCreateApiPoliciesPostResponse
func (c *ClientWithResponses) PolicyCreateApiPoliciesPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PolicyCreateApiPoliciesPostResponse, error) {
	rsp, err := c.PolicyCreateApiPoliciesPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePolicyCreateApiPoliciesPostResponse(rsp)
}

func (c *ClientWithResponses) PolicyCreateApiPoliciesPostWithResponse(ctx context.Context, body PolicyCreateApiPoliciesPostJSONRequestBody, reqEditors ...RequestEditorFn) (*PolicyCreateApiPoliciesPostResponse, error) {
	rsp, err := c.PolicyCreateApiPoliciesPost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePolicyCreateApiPoliciesPostResponse(rsp)
}

// PolicyDeleteApiPoliciesPolicyIdDeleteWithResponse request returning *PolicyDeleteApiPoliciesPolicyIdDeleteResponse
func (c *ClientWithResponses) PolicyDeleteApiPoliciesPolicyIdDeleteWithResponse(ctx context.Context, policyId string, reqEditors ...RequestEditorFn) (*PolicyDeleteApiPoliciesPolicyIdDeleteResponse, error) {
	rsp, err := c.PolicyDeleteApiPoliciesPolicyIdDelete(ctx, policyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePolicyDeleteApiPoliciesPolicyIdDeleteResponse(rsp)
}

// PolicyGetApiPoliciesPolicyIdGetWithResponse request returning *PolicyGetApiPoliciesPolicyIdGetResponse
func (c *ClientWithResponses) PolicyGetApiPoliciesPolicyIdGetWithResponse(ctx context.Context, policyId string, params *PolicyGetApiPoliciesPolicyIdGetParams, reqEditors ...RequestEditorFn) (*PolicyGetApiPoliciesPolicyIdGetResponse, error) {
	rsp, err := c.PolicyGetApiPoliciesPolicyIdGet(ctx, policyId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePolicyGetApiPoliciesPolicyIdGetResponse(rsp)
}

// SetPolicyStateApiPoliciesPolicyIdStatePutWithBodyWithResponse request with arbitrary body returning *SetPolicyStateApiPoliciesPolicyIdStatePutResponse
func (c *ClientWithResponses) SetPolicyStateApiPoliciesPolicyIdStatePutWithBodyWithResponse(ctx context.Context, policyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetPolicyStateApiPoliciesPolicyIdStatePutResponse, error) {
	rsp, err := c.SetPolicyStateApiPoliciesPolicyIdStatePutWithBody(ctx, policyId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetPolicyStateApiPoliciesPolicyIdStatePutResponse(rsp)
}

func (c *ClientWithResponses) SetPolicyStateApiPoliciesPolicyIdStatePutWithResponse(ctx context.Context, policyId string, body SetPolicyStateApiPoliciesPolicyIdStatePutJSONRequestBody, reqEditors ...RequestEditorFn) (*SetPolicyStateApiPoliciesPolicyIdStatePutResponse, error) {
	rsp, err := c.SetPolicyStateApiPoliciesPolicyIdStatePut(ctx, policyId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetPolicyStateApiPoliciesPolicyIdStatePutResponse(rsp)
}

// TriggerScanApiScanDefinitionsTypeIdScanPostWithBodyWithResponse request with arbitrary body returning *TriggerScanApiScanDefinitionsTypeIdScanPostResponse
func (c *ClientWithResponses) TriggerScanApiScanDefinitionsTypeIdScanPostWithBodyWithResponse(ctx context.Context, pType string, id string, params *TriggerScanApiScanDefinitionsTypeIdScanPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TriggerScanApiScanDefinitionsTypeIdScanPostResponse, error) {
	rsp, err := c.TriggerScanApiScanDefinitionsTypeIdScanPostWithBody(ctx, pType, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTriggerScanApiScanDefinitionsTypeIdScanPostResponse(rsp)
}

func (c *ClientWithResponses) TriggerScanApiScanDefinitionsTypeIdScanPostWithResponse(ctx context.Context, pType string, id string, params *TriggerScanApiScanDefinitionsTypeIdScanPostParams, body TriggerScanApiScanDefinitionsTypeIdScanPostJSONRequestBody, reqEditors ...RequestEditorFn) (*TriggerScanApiScanDefinitionsTypeIdScanPostResponse, error) {
	rsp, err := c.TriggerScanApiScanDefinitionsTypeIdScanPost(ctx, pType, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTriggerScanApiScanDefinitionsTypeIdScanPostResponse(rsp)
}

// GetScansApiScansGetWithResponse request returning *GetScansApiScansGetResponse
func (c *ClientWithResponses) GetScansApiScansGetWithResponse(ctx context.Context, params *GetScansApiScansGetParams, reqEditors ...RequestEditorFn) (*GetScansApiScansGetResponse, error) {
	rsp, err := c.GetScansApiScansGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetScansApiScansGetResponse(rsp)
}

// ListAllSecretStoresApiSecretStoresGetWithResponse request returning *ListAllSecretStoresApiSecretStoresGetResponse
func (c *ClientWithResponses) ListAllSecretStoresApiSecretStoresGetWithResponse(ctx context.Context, params *ListAllSecretStoresApiSecretStoresGetParams, reqEditors ...RequestEditorFn) (*ListAllSecretStoresApiSecretStoresGetResponse, error) {
	rsp, err := c.ListAllSecretStoresApiSecretStoresGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAllSecretStoresApiSecretStoresGetResponse(rsp)
}

// CreateSecretStoreApiSecretStoresPostWithBodyWithResponse request with arbitrary body returning *CreateSecretStoreApiSecretStoresPostResponse
func (c *ClientWithResponses) CreateSecretStoreApiSecretStoresPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSecretStoreApiSecretStoresPostResponse, error) {
	rsp, err := c.CreateSecretStoreApiSecretStoresPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSecretStoreApiSecretStoresPostResponse(rsp)
}

func (c *ClientWithResponses) CreateSecretStoreApiSecretStoresPostWithResponse(ctx context.Context, body CreateSecretStoreApiSecretStoresPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSecretStoreApiSecretStoresPostResponse, error) {
	rsp, err := c.CreateSecretStoreApiSecretStoresPost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSecretStoreApiSecretStoresPostResponse(rsp)
}

// PutApiSecretStoresStateWithBodyWithResponse request with arbitrary body returning *PutApiSecretStoresStateResponse
func (c *ClientWithResponses) PutApiSecretStoresStateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiSecretStoresStateResponse, error) {
	rsp, err := c.PutApiSecretStoresStateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiSecretStoresStateResponse(rsp)
}

func (c *ClientWithResponses) PutApiSecretStoresStateWithResponse(ctx context.Context, body PutApiSecretStoresStateJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiSecretStoresStateResponse, error) {
	rsp, err := c.PutApiSecretStoresState(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiSecretStoresStateResponse(rsp)
}

// DeleteSecretStoreApiSecretStoresStoreIdDeleteWithResponse request returning *DeleteSecretStoreApiSecretStoresStoreIdDeleteResponse
func (c *ClientWithResponses) DeleteSecretStoreApiSecretStoresStoreIdDeleteWithResponse(ctx context.Context, storeId SecretStoreIdString, reqEditors ...RequestEditorFn) (*DeleteSecretStoreApiSecretStoresStoreIdDeleteResponse, error) {
	rsp, err := c.DeleteSecretStoreApiSecretStoresStoreIdDelete(ctx, storeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSecretStoreApiSecretStoresStoreIdDeleteResponse(rsp)
}

// GetASecretStoreApiSecretStoresStoreIdGetWithResponse request returning *GetASecretStoreApiSecretStoresStoreIdGetResponse
func (c *ClientWithResponses) GetASecretStoreApiSecretStoresStoreIdGetWithResponse(ctx context.Context, storeId SecretStoreIdString, reqEditors ...RequestEditorFn) (*GetASecretStoreApiSecretStoresStoreIdGetResponse, error) {
	rsp, err := c.GetASecretStoreApiSecretStoresStoreIdGet(ctx, storeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetASecretStoreApiSecretStoresStoreIdGetResponse(rsp)
}

// UpdateSecretStoreApiSecretStoresStoreIdPatchWithBodyWithResponse request with arbitrary body returning *UpdateSecretStoreApiSecretStoresStoreIdPatchResponse
func (c *ClientWithResponses) UpdateSecretStoreApiSecretStoresStoreIdPatchWithBodyWithResponse(ctx context.Context, storeId SecretStoreIdString, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSecretStoreApiSecretStoresStoreIdPatchResponse, error) {
	rsp, err := c.UpdateSecretStoreApiSecretStoresStoreIdPatchWithBody(ctx, storeId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSecretStoreApiSecretStoresStoreIdPatchResponse(rsp)
}

func (c *ClientWithResponses) UpdateSecretStoreApiSecretStoresStoreIdPatchWithResponse(ctx context.Context, storeId SecretStoreIdString, body UpdateSecretStoreApiSecretStoresStoreIdPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSecretStoreApiSecretStoresStoreIdPatchResponse, error) {
	rsp, err := c.UpdateSecretStoreApiSecretStoresStoreIdPatch(ctx, storeId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSecretStoreApiSecretStoresStoreIdPatchResponse(rsp)
}

// ListAllSecretsFiltersApiSecretStoresStoreIdFiltersGetWithResponse request returning *ListAllSecretsFiltersApiSecretStoresStoreIdFiltersGetResponse
func (c *ClientWithResponses) ListAllSecretsFiltersApiSecretStoresStoreIdFiltersGetWithResponse(ctx context.Context, storeId SecretStoreIdString, reqEditors ...RequestEditorFn) (*ListAllSecretsFiltersApiSecretStoresStoreIdFiltersGetResponse, error) {
	rsp, err := c.ListAllSecretsFiltersApiSecretStoresStoreIdFiltersGet(ctx, storeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAllSecretsFiltersApiSecretStoresStoreIdFiltersGetResponse(rsp)
}

// CreateSecretsFilterApiSecretStoresStoreIdFiltersPostWithBodyWithResponse request with arbitrary body returning *CreateSecretsFilterApiSecretStoresStoreIdFiltersPostResponse
func (c *ClientWithResponses) CreateSecretsFilterApiSecretStoresStoreIdFiltersPostWithBodyWithResponse(ctx context.Context, storeId SecretStoreIdString, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSecretsFilterApiSecretStoresStoreIdFiltersPostResponse, error) {
	rsp, err := c.CreateSecretsFilterApiSecretStoresStoreIdFiltersPostWithBody(ctx, storeId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSecretsFilterApiSecretStoresStoreIdFiltersPostResponse(rsp)
}

func (c *ClientWithResponses) CreateSecretsFilterApiSecretStoresStoreIdFiltersPostWithResponse(ctx context.Context, storeId SecretStoreIdString, body CreateSecretsFilterApiSecretStoresStoreIdFiltersPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSecretsFilterApiSecretStoresStoreIdFiltersPostResponse, error) {
	rsp, err := c.CreateSecretsFilterApiSecretStoresStoreIdFiltersPost(ctx, storeId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSecretsFilterApiSecretStoresStoreIdFiltersPostResponse(rsp)
}

// DeleteSecretsFilterApiSecretStoresStoreIdFiltersFilterIdDeleteWithResponse request returning *DeleteSecretsFilterApiSecretStoresStoreIdFiltersFilterIdDeleteResponse
func (c *ClientWithResponses) DeleteSecretsFilterApiSecretStoresStoreIdFiltersFilterIdDeleteWithResponse(ctx context.Context, storeId SecretStoreIdString, filterId string, reqEditors ...RequestEditorFn) (*DeleteSecretsFilterApiSecretStoresStoreIdFiltersFilterIdDeleteResponse, error) {
	rsp, err := c.DeleteSecretsFilterApiSecretStoresStoreIdFiltersFilterIdDelete(ctx, storeId, filterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSecretsFilterApiSecretStoresStoreIdFiltersFilterIdDeleteResponse(rsp)
}

// GetASecretsFilterApiSecretStoresStoreIdFiltersFilterIdGetWithResponse request returning *GetASecretsFilterApiSecretStoresStoreIdFiltersFilterIdGetResponse
func (c *ClientWithResponses) GetASecretsFilterApiSecretStoresStoreIdFiltersFilterIdGetWithResponse(ctx context.Context, storeId SecretStoreIdString, filterId string, reqEditors ...RequestEditorFn) (*GetASecretsFilterApiSecretStoresStoreIdFiltersFilterIdGetResponse, error) {
	rsp, err := c.GetASecretsFilterApiSecretStoresStoreIdFiltersFilterIdGet(ctx, storeId, filterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetASecretsFilterApiSecretStoresStoreIdFiltersFilterIdGetResponse(rsp)
}

// PutApiSecretStoresStoreIdStateWithBodyWithResponse request with arbitrary body returning *PutApiSecretStoresStoreIdStateResponse
func (c *ClientWithResponses) PutApiSecretStoresStoreIdStateWithBodyWithResponse(ctx context.Context, storeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiSecretStoresStoreIdStateResponse, error) {
	rsp, err := c.PutApiSecretStoresStoreIdStateWithBody(ctx, storeId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiSecretStoresStoreIdStateResponse(rsp)
}

func (c *ClientWithResponses) PutApiSecretStoresStoreIdStateWithResponse(ctx context.Context, storeId string, body PutApiSecretStoresStoreIdStateJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiSecretStoresStoreIdStateResponse, error) {
	rsp, err := c.PutApiSecretStoresStoreIdState(ctx, storeId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiSecretStoresStoreIdStateResponse(rsp)
}

// GetTheConnectionStatusOfASecretStoreApiSecretStoresStoreIdStatusConnectionGetWithResponse request returning *GetTheConnectionStatusOfASecretStoreApiSecretStoresStoreIdStatusConnectionGetResponse
func (c *ClientWithResponses) GetTheConnectionStatusOfASecretStoreApiSecretStoresStoreIdStatusConnectionGetWithResponse(ctx context.Context, storeId SecretStoreIdString, reqEditors ...RequestEditorFn) (*GetTheConnectionStatusOfASecretStoreApiSecretStoresStoreIdStatusConnectionGetResponse, error) {
	rsp, err := c.GetTheConnectionStatusOfASecretStoreApiSecretStoresStoreIdStatusConnectionGet(ctx, storeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTheConnectionStatusOfASecretStoreApiSecretStoresStoreIdStatusConnectionGetResponse(rsp)
}

// ListSecretsApiSecretsGetWithResponse request returning *ListSecretsApiSecretsGetResponse
func (c *ClientWithResponses) ListSecretsApiSecretsGetWithResponse(ctx context.Context, params *ListSecretsApiSecretsGetParams, reqEditors ...RequestEditorFn) (*ListSecretsApiSecretsGetResponse, error) {
	rsp, err := c.ListSecretsApiSecretsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSecretsApiSecretsGetResponse(rsp)
}

// ParseGetApiConfigurationResponse parses an HTTP response from a GetApiConfigurationWithResponse call
func ParseGetApiConfigurationResponse(rsp *http.Response) (*GetApiConfigurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TenantConfigurationOutput
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePatchApiConfigurationResponse parses an HTTP response from a PatchApiConfigurationWithResponse call
func ParsePatchApiConfigurationResponse(rsp *http.Response) (*PatchApiConfigurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchApiConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseSecretStoreInfoApiInfoGetResponse parses an HTTP response from a SecretStoreInfoApiInfoGetWithResponse call
func ParseSecretStoreInfoApiInfoGetResponse(rsp *http.Response) (*SecretStoreInfoApiInfoGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SecretStoreInfoApiInfoGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TenantInfoOutput
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListPoliciesApiPoliciesGetResponse parses an HTTP response from a ListPoliciesApiPoliciesGetWithResponse call
func ParseListPoliciesApiPoliciesGetResponse(rsp *http.Response) (*ListPoliciesApiPoliciesGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPoliciesApiPoliciesGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PolicyListOutput
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePolicyCreateApiPoliciesPostResponse parses an HTTP response from a PolicyCreateApiPoliciesPostWithResponse call
func ParsePolicyCreateApiPoliciesPostResponse(rsp *http.Response) (*PolicyCreateApiPoliciesPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PolicyCreateApiPoliciesPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PolicyRegularOutput
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePolicyDeleteApiPoliciesPolicyIdDeleteResponse parses an HTTP response from a PolicyDeleteApiPoliciesPolicyIdDeleteWithResponse call
func ParsePolicyDeleteApiPoliciesPolicyIdDeleteResponse(rsp *http.Response) (*PolicyDeleteApiPoliciesPolicyIdDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PolicyDeleteApiPoliciesPolicyIdDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeletePolicyOutput
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePolicyGetApiPoliciesPolicyIdGetResponse parses an HTTP response from a PolicyGetApiPoliciesPolicyIdGetWithResponse call
func ParsePolicyGetApiPoliciesPolicyIdGetResponse(rsp *http.Response) (*PolicyGetApiPoliciesPolicyIdGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PolicyGetApiPoliciesPolicyIdGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseSetPolicyStateApiPoliciesPolicyIdStatePutResponse parses an HTTP response from a SetPolicyStateApiPoliciesPolicyIdStatePutWithResponse call
func ParseSetPolicyStateApiPoliciesPolicyIdStatePutResponse(rsp *http.Response) (*SetPolicyStateApiPoliciesPolicyIdStatePutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetPolicyStateApiPoliciesPolicyIdStatePutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseTriggerScanApiScanDefinitionsTypeIdScanPostResponse parses an HTTP response from a TriggerScanApiScanDefinitionsTypeIdScanPostWithResponse call
func ParseTriggerScanApiScanDefinitionsTypeIdScanPostResponse(rsp *http.Response) (*TriggerScanApiScanDefinitionsTypeIdScanPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TriggerScanApiScanDefinitionsTypeIdScanPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TriggerScanOutput
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetScansApiScansGetResponse parses an HTTP response from a GetScansApiScansGetWithResponse call
func ParseGetScansApiScansGetResponse(rsp *http.Response) (*GetScansApiScansGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetScansApiScansGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScanListOutput
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	}

	return response, nil
}

// ParseListAllSecretStoresApiSecretStoresGetResponse parses an HTTP response from a ListAllSecretStoresApiSecretStoresGetWithResponse call
func ParseListAllSecretStoresApiSecretStoresGetResponse(rsp *http.Response) (*ListAllSecretStoresApiSecretStoresGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAllSecretStoresApiSecretStoresGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SecretStoresWithReplicatedDataOutputList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateSecretStoreApiSecretStoresPostResponse parses an HTTP response from a CreateSecretStoreApiSecretStoresPostWithResponse call
func ParseCreateSecretStoreApiSecretStoresPostResponse(rsp *http.Response) (*CreateSecretStoreApiSecretStoresPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSecretStoreApiSecretStoresPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SecretStoreOutput
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutApiSecretStoresStateResponse parses an HTTP response from a PutApiSecretStoresStateWithResponse call
func ParsePutApiSecretStoresStateResponse(rsp *http.Response) (*PutApiSecretStoresStateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiSecretStoresStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest struct {
			Results *[]struct {
				ErrorMessage *string                                  `json:"errorMessage,omitempty"`
				Result       *PutApiSecretStoresState207ResultsResult `json:"result,omitempty"`

				// SecretStoreId The unique identifier of the secret store
				SecretStoreId *SecretStoreIdString `json:"secretStoreId,omitempty"`
			} `json:"results,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteSecretStoreApiSecretStoresStoreIdDeleteResponse parses an HTTP response from a DeleteSecretStoreApiSecretStoresStoreIdDeleteWithResponse call
func ParseDeleteSecretStoreApiSecretStoresStoreIdDeleteResponse(rsp *http.Response) (*DeleteSecretStoreApiSecretStoresStoreIdDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSecretStoreApiSecretStoresStoreIdDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetASecretStoreApiSecretStoresStoreIdGetResponse parses an HTTP response from a GetASecretStoreApiSecretStoresStoreIdGetWithResponse call
func ParseGetASecretStoreApiSecretStoresStoreIdGetResponse(rsp *http.Response) (*GetASecretStoreApiSecretStoresStoreIdGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetASecretStoreApiSecretStoresStoreIdGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SecretStoreWithReplicatedDataOutput
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateSecretStoreApiSecretStoresStoreIdPatchResponse parses an HTTP response from a UpdateSecretStoreApiSecretStoresStoreIdPatchWithResponse call
func ParseUpdateSecretStoreApiSecretStoresStoreIdPatchResponse(rsp *http.Response) (*UpdateSecretStoreApiSecretStoresStoreIdPatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSecretStoreApiSecretStoresStoreIdPatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SecretStoreOutput
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListAllSecretsFiltersApiSecretStoresStoreIdFiltersGetResponse parses an HTTP response from a ListAllSecretsFiltersApiSecretStoresStoreIdFiltersGetWithResponse call
func ParseListAllSecretsFiltersApiSecretStoresStoreIdFiltersGetResponse(rsp *http.Response) (*ListAllSecretsFiltersApiSecretStoresStoreIdFiltersGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAllSecretsFiltersApiSecretStoresStoreIdFiltersGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FilterOutput
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateSecretsFilterApiSecretStoresStoreIdFiltersPostResponse parses an HTTP response from a CreateSecretsFilterApiSecretStoresStoreIdFiltersPostWithResponse call
func ParseCreateSecretsFilterApiSecretStoresStoreIdFiltersPostResponse(rsp *http.Response) (*CreateSecretsFilterApiSecretStoresStoreIdFiltersPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSecretsFilterApiSecretStoresStoreIdFiltersPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest FilterOutput
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteSecretsFilterApiSecretStoresStoreIdFiltersFilterIdDeleteResponse parses an HTTP response from a DeleteSecretsFilterApiSecretStoresStoreIdFiltersFilterIdDeleteWithResponse call
func ParseDeleteSecretsFilterApiSecretStoresStoreIdFiltersFilterIdDeleteResponse(rsp *http.Response) (*DeleteSecretsFilterApiSecretStoresStoreIdFiltersFilterIdDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSecretsFilterApiSecretStoresStoreIdFiltersFilterIdDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetASecretsFilterApiSecretStoresStoreIdFiltersFilterIdGetResponse parses an HTTP response from a GetASecretsFilterApiSecretStoresStoreIdFiltersFilterIdGetWithResponse call
func ParseGetASecretsFilterApiSecretStoresStoreIdFiltersFilterIdGetResponse(rsp *http.Response) (*GetASecretsFilterApiSecretStoresStoreIdFiltersFilterIdGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetASecretsFilterApiSecretStoresStoreIdFiltersFilterIdGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FilterOutput
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutApiSecretStoresStoreIdStateResponse parses an HTTP response from a PutApiSecretStoresStoreIdStateWithResponse call
func ParsePutApiSecretStoresStoreIdStateResponse(rsp *http.Response) (*PutApiSecretStoresStoreIdStateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiSecretStoresStoreIdStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetTheConnectionStatusOfASecretStoreApiSecretStoresStoreIdStatusConnectionGetResponse parses an HTTP response from a GetTheConnectionStatusOfASecretStoreApiSecretStoresStoreIdStatusConnectionGetWithResponse call
func ParseGetTheConnectionStatusOfASecretStoreApiSecretStoresStoreIdStatusConnectionGetResponse(rsp *http.Response) (*GetTheConnectionStatusOfASecretStoreApiSecretStoresStoreIdStatusConnectionGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTheConnectionStatusOfASecretStoreApiSecretStoresStoreIdStatusConnectionGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConnectionsTestOutput
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListSecretsApiSecretsGetResponse parses an HTTP response from a ListSecretsApiSecretsGetWithResponse call
func ParseListSecretsApiSecretsGetResponse(rsp *http.Response) (*ListSecretsApiSecretsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListSecretsApiSecretsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 200:
		var dest SecretListOutput
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/x.secretshub.beta+json" && rsp.StatusCode == 200:
		var dest SecretListOutput
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationxSecretshubBetaJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
